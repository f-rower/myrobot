clf;        %clears figures
clc;        %clears console
clear;      %clears workspace
tic
axis equal; %keeps the x and y scale the same
%map=[0,0;60,0;60,45;45,45;45,59;106,59;106,105;0,105];  %default map
map = [-30,0;-30,40;30,40;30,60;5,60;45,90;85,60;60,60;60,40;120,40;120,60;95,60;135,90;175,60;150,60;150,40;210,40;210,60;185,60;225,90;265,60;240,60;240,40;300,40;300,0]; %repeated features
%map = [0,0;60,0;60,50;100,50;70,0;110,0;150,80;30,80;30,40;0,80];
%% Definition of legal moving locations. Divides map into nodes to which we can move/not move.
botSim = BotSim(map);  %sets up a botSim object, a map, and debug mode on.

hold on;
botSim.drawMap();

limsMin = min(map); % minimum limits of the map
limsMax = max(map); % maximum limits of the map
dims = limsMax-limsMin; %dimension of the map
res = 10; %sampling resouloution in cm
iterators = dims/res;
iterators = ceil(iterators)+[1 1]; %to counteract 1 based indexing
legalArray = zeros(fliplr(iterators)); %Array to define legal moving locations.
locArray = zeros(10,(size(legalArray,1)*size(legalArray,2)));
hold on
%loops through the grid indexes and tests if they are legal moving nodes.
ii=1;
for i = 1:iterators(2) %The array shows the map inverted, but this hopefully simplifies the coding
    for j = 1:iterators(1)
        testPos = limsMin + [j-1 i-1]*res; %to counteract 1 based indexing
        locArray([1,2],ii) = [testPos(1), testPos(2)];
        locArray([3,4],ii) = [i,j];%Store the matrix indices for this node
        %notice, that i and j have also been swapped
        legalArray(i,j) = botSim.pointInsideMap(testPos);
        if legalArray(i,j)
            botSim.setBotPos(testPos)
            botScan = botSim.ultraScan();
         if isempty(find(botScan==0, 1))&& isempty(find(botScan<10, 1))%Check if point is on map boundary or if it is too close to the wall.
                plot(testPos(1),testPos(2),'*');%inside map
         else
             legalArray(i,j) = 0;
           plot(testPos(1),testPos(2),'o');%border or too close to border
         end
        else
            plot(testPos(1),testPos(2),'o');%outside map
        end
        ii= ii+1;
    end
end
toc
%% Path finding

%Get real bot's location. For testing now, I'll just put in some
%coordinates.
botLoc = [52 23];
[dist, loc] = min(sqrt((locArray(1,:)-botLoc(1)).^2 + (locArray(2,:)-botLoc(2)).^2));

%Target will be manually set here as well just for testing

target = [11,8];
% Find closest legal node in the array and set it as the starting node

legalArray(locArray(3,loc),locArray(4,loc));%These are the indices of the starting node

%Path planning algorithm(A*)


%%Move the robot along the path

